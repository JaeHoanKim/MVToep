#' @examples
#' rmvMat(10, c(0:20)/20, 1, 0.5, tau = 1)
rmvMat = function(n, gridpoints, rho, nu, mu = rep(0, length(gridpoints)), tau = 1){
N = length(gridpoints)
grid_regular_check(gridpoints)
gridpoints = sort(gridpoints)
embed_result = nnd.C.Mat(gridpoints, m = min_m(gridpoints), rho, nu)
cj = embed_result$cj
m = embed_result$m
lambda = embed_result$eigval
out = matrix(0, n, m)
for (k in 1:n){
vec = rep(0, m)
vec[1] = sqrt(lambda[1]) * rnorm(1) / sqrt(m)
vec[(m / 2) + 1] = sqrt(lambda[(m / 2) + 1]) * rnorm(1) / sqrt(m)
i=sqrt(as.complex(-1))
for(j in 2:(m/2)){
uj = rnorm(1); vj = rnorm(1)
vec[j] = (sqrt(lambda[j]) * (uj + i * vj)) / (sqrt(2 * m))
vec[m + 2 - j] = (sqrt(lambda[j]) * (uj - i * vj)) / (sqrt(2 * m))
}
out[k, ] = Re(fft(vec))
}
out = out[, 1:N] * tau
out = out + matrix(mu, n, N, byrow = T)
Sigma.vec = MatK(gridpoints, gridpoints[1], rho, nu)
Sigma.out = (tau^2 * circ_mat(c(Sigma.vec, Sigma.vec[N:2])))[1:N, 1:N]
return(list("samples" = out, "Cov.mat" = Sigma.out))
}
#' Multivariate normal sampling from RBF covarinace kernel with regular grids
#'
#' @param gridpoints the gridpoints at which multivariate normal vector is drawn. To ensure the Toeplitz structure of the covariance matrix, the grid should be regular.
#' @param tau the constant to be multiplied to all the elements of the covariance matrix
#' @inheritParams rmvToep
#' @inheritParams RBFK
#'
#' @return It returns two values as a list. The first element is the n by N (the length of gridpoints) matrix, in which n multivariate normal vectors are stacked vertically.
#' The second elemnt is the covariance matrix used for the sampling.
#' @export
#'
#' @examples
#' rmvRBF(100, c(0:20)/20, l = 0.1, tau = 1)
rmvRBF = function(n, gridpoints, l, mu = rep(0, length(gridpoints)), tau = 1){
N = length(gridpoints)
grid_regular_check(gridpoints)
gridpoints = sort(gridpoints)
embed_result = nnd.C.RBF(gridpoints, m = min_m(gridpoints), l)
cj = embed_result$cj
m = embed_result$m
lambda = embed_result$eigval
out = matrix(0, n, m)
for (k in 1:n){
vec = rep(0, m)
vec[1] = sqrt(lambda[1]) * rnorm(1) / sqrt(m)
vec[(m / 2) + 1] = sqrt(lambda[(m / 2) + 1]) * rnorm(1) / sqrt(m)
i=sqrt(as.complex(-1))
for(j in 2:(m/2)){
uj = rnorm(1); vj = rnorm(1)
vec[j] = (sqrt(lambda[j]) * (uj + i * vj)) / (sqrt(2 * m))
vec[m + 2 - j] = (sqrt(lambda[j]) * (uj - i * vj)) / (sqrt(2 * m))
}
out[k, ] = Re(fft(vec))
}
out = out[, 1:N] * tau
out = out + matrix(mu, n, N, byrow = T)
Sigma.vec = RBFK(gridpoints, gridpoints[1], l)
Sigma.out = (tau^2 * circ_mat(c(Sigma.vec, Sigma.vec[N:2])))[1:N, 1:N]
return(list("samples" = out, "Cov.mat" = Sigma.out))
}
Sigma2 = matrix(c(2, 1, 0,
1, 2, 1,
0, 1.001, 2,
1, 2, 3), 3, 4)
Sigma3 = matrix(c(2, 1, 0,
1, 2, 1,
0, 1.001, 2), 3, 3)
Sigma4 = matrix(c(1, 0.99, 0.97, 0.94, 0.89,
0.99, 1, 0.99, 0.97, 0.94,
0.97, 0.99, 1, 0.99, 0.97,
0.94, 0.97, 0.99, 1, 0.99,
0.89, 0.94, 0.97, 0.99, 1), 5, 5)
grid1 = c(0:8)/8
grid1[3] = grid1[3] + 0.001
test_that("Compatibility check", {
expect_error(rmvToep(5, Sigma2), "Sigma should be a square matrix!")
expect_error(rmvToep(5, Sigma3), "Sigma should be a symmetric matrix!")
expect_error(rmvToep(5, Sigma4), "Sigma is ill-conditioned or not Positive definite; try rmvMat or rmvRBF if applicable.")
expect_error(grid_regular_check(grid1), "gridpoints should be regular!")
expect_warning(grid_regular_check(c(1, 2, 3, 5, 4), "The gridpoints are not sorted. The gridpoints will be used in an ascending order!"))
expect_error(Sigma.AR.order(0.3, 20, -1), "order should be given as a non-negative integer!")
})
test_that("Compatibility check", {
expect_error(rmvToep(5, Sigma2), "Sigma should be a square matrix!")
expect_error(rmvToep(5, Sigma3), "Sigma should be a symmetric matrix!")
expect_error(rmvToep(5, Sigma4), "Sigma is ill-conditioned or not Positive definite; try rmvMat or rmvRBF if applicable.")
expect_error(grid_regular_check(grid1), "gridpoints should be regular!")
expect_warning(grid_regular_check(c(1, 2, 3, 5, 4)), "The gridpoints are not sorted. The gridpoints will be used in an ascending order!")
expect_error(Sigma.AR.order(0.3, 20, -1), "order should be given as a non-negative integer!")
})
test_that("MatK", {
expect_equal(MatK(1, 1, 1, 1), 1)
expect_equal(MatK(c(1, 2, 3), 1, rho = 2, nu = 3), c(1.0000000, 0.83910663, 0.53592547))
})
test_that("RBFK", {
expect_equal(RBFK(1, 1, 1), 1)
expect_equal(RBFK(c(1, 2, 3), 1, l = 3), c(1.0000000, 0.945959469, 0.800737403))
})
## check the size of the output
Sigma1 = matrix(c(1, 0.1, 0, 0, 0,
0.1, 1, 0.1, 0, 0,
0, 0.1, 1, 0.1, 0,
0, 0, 0.1, 1, 0.1,
0, 0, 0, 0.1, 1), 5, 5)
test_that("rmv dimension test", {
expect_equal(dim(rmvToep(50, Sigma1, mu = c(1, 2, 3, 4, 5))), c(50, 5))
expect_equal(dim(rmvMat(30, c(0:50)/50, rho = 1, nu = 1)[[1]]), c(30, 51))
expect_equal(dim(rmvMat(1, c(0:50)/50, rho = 1, nu = 1)[[1]]), c(1, 51))
expect_equal(dim(rmvRBF(50, c(0:10), l = 0.1, mu = 10 * runif(10))[[1]]), c(50, 11))
})
## check the result for AR matrix and nonnegativity check
Sigma11 = Sigma.AR.order(0.3, 20)
Sigma12 = Sigma.AR.order(0.8, 10, order = 2)
test_that("rmvToep result test", {
expect_equal(dim(Sigma11), c(20, 20))
expect_equal(nnd.C.Toep(Sigma11), "rmvToep is applicable for the given Sigma!")
expect_equal(nnd.C.Toep(Sigma12), "min(lambda) < 0; rmvToep cannot be applied for the given Sigma!")
})
## error expected for ill conditioned matrix
test_that("error check for ill-conditioned matrix",{
expect_error(rmvRBF(10, c(0:30)/30, l=3), "It seems that adequate circular matrix is not found. Try smaller l.")
expect_error(rmvMat(10, c(0:50)/50, rho = 3, nu = 1), "It seems that adequate circular matrix is not found. Try smaller l.")
})
## exact error location check
test_that("error in nnd function", {
expect_error(nnd.C.RBF(c(0:30)/30, m = 64, l = 3), "It seems that adequate circular matrix is not found. Try smaller l.")
expect_error(nnd.C.Mat(c(0:50)/50, m = 128, rho = 3, nu = 1), "It seems that adequate circular matrix is not found. Try smaller l.")
})
## compatibility check
Sigma2 = matrix(c(2, 1, 0,
1, 2, 1,
0, 1.001, 2,
1, 2, 3), 3, 4)
Sigma3 = matrix(c(2, 1, 0,
1, 2, 1,
0, 1.001, 2), 3, 3)
Sigma4 = matrix(c(1, 0.99, 0.97, 0.94, 0.89,
0.99, 1, 0.99, 0.97, 0.94,
0.97, 0.99, 1, 0.99, 0.97,
0.94, 0.97, 0.99, 1, 0.99,
0.89, 0.94, 0.97, 0.99, 1), 5, 5)
grid1 = c(0:8)/8
grid1[3] = grid1[3] + 0.001
test_that("Compatibility check", {
expect_error(rmvToep(5, Sigma2), "Sigma should be a square matrix!")
expect_error(rmvToep(5, Sigma3), "Sigma should be a symmetric matrix!")
expect_error(rmvToep(5, Sigma4), "Sigma is ill-conditioned or not Positive definite; try rmvMat or rmvRBF if applicable.")
expect_error(grid_regular_check(grid1), "gridpoints should be regular!")
expect_warning(grid_regular_check(c(1, 2, 3, 5, 4)), "The gridpoints are not sorted. The gridpoints will be used in an ascending order!")
expect_error(Sigma.AR.order(0.3, 20, -1), "order should be given as a non-negative integer!")
})
nnd.C.Toep
vec1 = rnorm(25)
Sigma5 = matrix(vec1, 5, 5)
vec1 = abs(rnorm(25))
Sigma5 = matrix(vec1, 5, 5) + t(matrix(vec1, 5, 5))
Sigma5
?MatK
install.packages("covr")
library(MVToep)
usethis::use_readme_rmd()
rm(list = ls())
gc()
library(MVToep)
Sigma = Sigma.AR.order(0.3, 200)
rmvToep(500, Sigma)
Sample1 = rmvToep(500, Sigma)
Sigma = Sigma.AR.order(0.7, 200)
Sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
rm(Sample1)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
corr(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
cov(sample1[, 1], sample1[, 2])
var(sample[, 1])
var(sample1[, 1])
var(sample1[, 2])
cov(sample1[, 2])
cov(sample1[, 1], sample1[, 2])
?cor
cor(sample[, 1])
cor(sample1[, 1])
cor(sample1[, 1], sample1[, 2])
0.855^2
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 3])
cov(sample1[, 1], sample1[, 3])
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 3])
cov(sample1[, 1], sample1[, 3])
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 3])
cov(sample1[, 1], sample1[, 3])
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 3])
cov(sample1[, 1], sample1[, 3])
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 3])
cor(sample1[, 1], sample1[, 3])
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 3])
cor(sample1[, 1], sample1[, 3])
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 3])
cor(sample1[, 1], sample1[, 3])
library(MVToep)
Sigma = Sigma.AR.order(0.4, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 3])
cor(sample1[, 1], sample1[, 3])
library(MVToep)
Sigma = Sigma.AR.order(0.4, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200, order = 10)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200, order = 10)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
plot(sample1[, 1], sample1[, 21])
cor(sample1[, 1], sample1[, 21])
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200, order = 1)
sample1 = rmvToep(500, Sigma)
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200, order = 2)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
plot(sample1[, 1], sample1[, 21])
cor(sample1[, 1], sample1[, 21])
?Sigma.AR.order
Sigma = Sigma.AR.order(0.5, 200, order = 1)
Sigma
max(abs(Sigma- diag(200)))
max(abs(Sigma- 0.5*diag(200)))
Sigma[1:10, 1:10]
Sigma = Sigma.AR.order(0.5, 200, order = 0)
Sigma
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200, order = 0)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
plot(sample1[, 1], sample1[, 21])
cor(sample1[, 1], sample1[, 21])
Sigma
max(abs(Sigma - diag(200)))
library(MVToep)
Sigma = Sigma.AR.order(0.5, 200, order = 0)
Sigma = Sigma.AR.order(0.5, 200, order = 1)
sample1 = rmvToep(500, Sigma)
Sigma = Sigma.AR.order(0.5, 200, order = 2)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
plot(sample1[, 1], sample1[, 21])
Sigma = Sigma.AR.order(0.7, 200)
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
cor(sample1[, 1], sample1[, 2])
plot(sample1[, 1], sample1[, 21])
cor(sample1[, 1], sample1[, 21])
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200, order = 3)
print(Sigma[1:6, 1:6])
sample1 = rmvToep(500, Sigma)
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200, order = 5)
print(Sigma[1:6, 1:6])
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
(cor(sample1[, 1], sample1[, 2]))
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200, order = 5)
print(Sigma[1:8, 1:8])
sample1 = rmvToep(500, Sigma)
plot(sample1[, 1], sample1[, 2])
(cor(sample1[, 1], sample1[, 2]))
plot(sample1[, 1], sample1[, 21])
(cor(sample1[, 1], sample1[, 21]))
remove.packages("covr")
install.packages("covr")
remove.packages("covr")
install.packages("covr")
remove.packages("covr")
install.packages("covr")
grid = c(0:300)/50
sample2 = rmvMat(40, grid, rho = 1, nu = 0.5)
sample2
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 1, nu = 0.5)
sample2 = result_Mat[[1]]
plot(sample2[1, ])
lines(sample2[1, ])
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 4, nu = 0.5)
sample2 = result_Mat[[1]]
lines(sample2[1, ])
plot(sample2[1, ])
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 4, nu = 0.5)
sample2 = result_Mat[[1]]
plot(sample2[1, ])
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 10, nu = 0.5)
sample2 = result_Mat[[1]]
plot(sample2[1, ])
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 2, nu = 3)
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 2, nu = 2)
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 3, nu = 2)
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 3, nu = 1)
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 3, nu = 1)
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 3, nu = 0.5)
sample2 = result_Mat[[1]]
plot
plot(sample2[1,])
plot(sample2[1, ])
lines(sample2[1, ], col = 1)
plot(sample2[1, ])
lines(sample2[1, ], col = 1)
plot(sample2[1, ])
lines(sample2[1, ], col = 1)
lines(sample2[2, ], col = 1)
lines(sample2[3, ], col = 1)
plot(sample2[1, ])
lines(sample2[1, ], col = 1)
lines(sample2[2, ], col = 1)
lines(sample2[5, ], col = 1)
plot(sample2[1, ])
lines(sample2[1, ], col = 1)
lines(sample2[2, ], col = 2)
lines(sample2[5, ], col = 3)
plot(sample2[1, ], ylim = c(-3, 3))
lines(sample2[1, ], col = 1)
lines(sample2[2, ], col = 2)
lines(sample2[5, ], col = 3)
plot(sample2[1, ], ylim = c(-3, 3))
for (i in 1:5){
lines(sample2[i, ], col = i)
}
plot(sample2[1, ], ylim = c(-3, 3))
for (i in 1:5){
lines(sample2[i, ], col = i)
}
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 3, nu = 0.5, tau = 0.5)
sample2 = result_Mat[[1]]
plot(sample2[1, ], ylim = c(-3, 3))
for (i in 1:5){
lines(sample2[i, ], col = i)
}
plot(sample2[1, ], ylim = c(-3, 3))
for (i in 1:7){
lines(sample2[i, ], col = i)
}
grid = c(0:300)/50
result_Mat = rmvMat(n = 40, grid, rho = 3, nu = 0.5, tau = 2)
sample2 = result_Mat[[1]]
plot(sample2[1, ], ylim = c(-6, 6))
for (i in 1:7){
lines(sample2[i, ], col = i)
}
grid = c(0:300)/50
result_RBF = rmvRBF(n = 40, grid, l = 2, tau = 2)
grid = c(0:30)/10
result_RBF = rmvRBF(n = 40, grid, l = 2, tau = 2)
grid = c(0:30)/10
result_RBF = rmvRBF(n = 40, grid, l = 1, tau = 2)
grid = c(0:30)/10
result_RBF = rmvRBF(n = 40, grid, l = 0.3, tau = 2)
grid = c(0:20)/10
result_RBF = rmvRBF(n = 40, grid, l = 0.3, tau = 2)
grid = c(0:10)/10
result_RBF = rmvRBF(n = 40, grid, l = 0.3, tau = 2)
grid = c(0:10)/10
result_RBF = rmvRBF(n = 40, grid, l = 4, tau = 2)
grid = c(0:10)/10
result_RBF = rmvRBF(n = 40, grid, l = 0.5, tau = 1)
grid = c(0:13)/13
result_RBF = rmvRBF(n = 40, grid, l = 0.5, tau = 1)
grid = c(0:13)/13
result_RBF = rmvRBF(n = 40, grid, l = 0.1, tau = 1)
sample3 = result_RBF[[1]]
grid = c(0:13)/13
result_RBF = rmvRBF(n = 40, grid, l = 0.1, tau = 1)
sample3 = result_RBF[[1]]
plot(sample3[1, ], ylim = c(-6, 6))
for (i in 1:7){
lines(sample3[i, ], col = i)
}
grid = c(0:13)/13
result_RBF = rmvRBF(n = 40, grid, l = 0.1, tau = 1)
sample3 = result_RBF[[1]]
plot(sample3[1, ], ylim = c(-3, 3))
for (i in 1:7){
lines(sample3[i, ], col = i)
}
library(MVToep)
Sigma = Sigma.AR.order(0.7, 200, order = 5)
print(Sigma[1:8, 1:8])
nnd.C.Toep(Sigma)
Sigma2 = Sigma.AR.order(0.7, 200, order = 1)
nnd.C.Toep(Sigma2)
?MatK
library(MVToep)
MatK
?MatK
?lm
?MatK
MatK(1, 2, -1, 1)
MatK(1, 2, 1, -1)
Sigma.AR.order(0.5, 10, 2)
#'
#' @return It returns the p by p covariance matrix of an autoregressive (AR) model. By assigning the order, one can customize the number of nonzero elements.
#' Generated matrices can be used for rmvToep function after checking by nnd.C.Toep function.
#' The elements in C is calculated as follows.
#' \eqn{C[i, j] = \rho^{|i-j|}} if \eqn{|i-j|}<=order, else 0
#' @export
#'
#' @examples
#' Sigma.AR.order(0.3, 10)
#' Sigma.AR.order(0.5, 10, order = 2)
Sigma.AR.order = function(rho, p, order = p){
order = floor(order)
if (order < 0){
stop("order should be given as a non-negative integer!")
}
R = diag(p)
for(i in 1:p){
for(j in 1:p){
R[i, j] = ifelse(abs(i-j) > order, 0, rho^(abs(i-j)))
}
return(R)
}
?Sigma.AR.order
nnd.C.Toep(Sigma.AR.order(0.3, 20))
nnd.C.Toep(Sigma.AR.order(0.3, 20, 3))
nnd.C.Toep(Sigma.AR.order(0.8, 10, 2))
devtools::spell_check()
spell_check()
devtools::spell_check()
version
